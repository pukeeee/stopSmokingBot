from datetime import datetime, timedelta
from database.requests import getUser




weekday_dict = {
    'monday': '–ø–æ–Ω–µ–¥—ñ–ª–æ–∫',
    'tuesday': '–≤—ñ–≤—Ç–æ—Ä–æ–∫',
    'wednesday': '—Å–µ—Ä–µ–¥–∞',
    'thursday': '—á–µ—Ç–≤–µ—Ä',
    'friday': "–ø'—è—Ç–Ω–∏—Ü—è",
    'saturday': '—Å—É–±–æ—Ç–∞',
    'sunday': '–Ω–µ–¥—ñ–ª—è'
}



async def get_formatted_date(date: datetime) -> tuple[str, str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º"""
    weekday = date.strftime('%A').lower()
    weekday_ua = weekday_dict.get(weekday, weekday)
    formatted_date = date.strftime("%d.%m")
    return weekday_ua, formatted_date



async def format_tracking_message(day_number: int, date: datetime, count: int = None, is_input_required: bool = False) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞"""
    weekday_ua, formatted_date = await get_formatted_date(date)
    
    message = f"–î–µ–Ω—å {day_number + 1}\nüìÖ {weekday_ua}, {formatted_date}\n\n"
    
    if is_input_required:
        message += "–í–≤–µ–¥–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–∫—É—Ä–µ–Ω–∏—Ö —Å–∏–≥–∞—Ä–µ—Ç –∑–∞ —Ü–µ–π –¥–µ–Ω—å:"
    else:
        if count is not None:
            message += f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∏–≥–∞—Ä–µ—Ç: {count}\n\n"
            message += "–Ø–∫—â–æ —Ö–æ—á–µ—à –∑–º—ñ–Ω–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å - –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è"
    
    return message

async def get_tracking_date(user_id: int, tracking_day: int) -> datetime:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–Ω—è —Ç—Ä–µ–∫–∏–Ω–≥–∞"""
    user = await getUser(user_id)
    start_date = datetime.fromtimestamp(user.plan_date)
    return start_date.date() + timedelta(days=tracking_day)